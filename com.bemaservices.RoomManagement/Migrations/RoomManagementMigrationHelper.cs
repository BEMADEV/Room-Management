// <copyright>
// Copyright by BEMA Software Services
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Rock.Plugin;

using Rock.Web.Cache;
using Rock.Lava.Blocks;
using System.Security.AccessControl;
using Rock;
using Rock.Data;

namespace com.bemaservices.RoomManagement.Migrations
{
    /// <summary>
    /// Class RoomManagementMigrationHelper.
    /// </summary>
    public class RoomManagementMigrationHelper
    {
        /// <summary>
        /// The migration
        /// </summary>
        private IMigration Migration = null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomManagementMigrationHelper" /> class.
        /// </summary>
        /// <param name="migration">The migration.</param>
        public RoomManagementMigrationHelper( IMigration migration )
        {
            Migration = migration;
        }

        #region Entity Type Methods

        /// <summary>
        /// Ensures the entity type exists.
        /// </summary>
        /// <param name="entityTypeName">Name of the entity type.</param>
        /// <param name="isEntity">if set to <c>true</c> [is entity].</param>
        /// <param name="isSecured">if set to <c>true</c> [is secured].</param>
        public void EnsureEntityTypeExists( string entityTypeName, bool isEntity = true, bool isSecured = true )
        {
            // NOTE: If it doesn't exist, add it assuming that IsEntity=True and IsSecured=True.  The framework will correct it if those assumptions are incorrect
            Migration.Sql( string.Format( @"
                if not exists (
                select id from EntityType where name = '{0}')
                begin
                INSERT INTO [EntityType]
                           ([Name]
                           ,[FriendlyName]
                           ,[IsEntity]
                           ,[IsSecured]
                           ,[IsCommon]
                           ,[Guid])
                     VALUES
                           ('{0}'
                           ,null
                           ,{1}
                           ,{2}
                           ,0
                           ,newid()
                           )
                end"
                , entityTypeName
                , isEntity ? 1 : 0
                , isSecured ? 1 : 0
                )
            );
        }

        /// <summary>
        /// Removes the type of the autogenerated entity.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="guid">The unique identifier.</param>
        private void RemoveAutogeneratedEntityType( string name, string guid )
        {
            Migration.Sql( String.Format( @"
                    Delete
                    From EntityType
                    Where Name = '{0}'
                    And Guid != '{1}'
                ",
                name,
                guid ) );
        }

        /// <summary>
        /// Updates the entity type by unique identifier.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="isEntity">if set to <c>true</c> [is entity].</param>
        /// <param name="isSecured">if set to <c>true</c> [is secured].</param>
        public void UpdateEntityTypeByGuid( string name, string guid, bool isEntity, bool isSecured )
        {
            RemoveAutogeneratedEntityType( name, guid );

            Migration.Sql( string.Format( @"
                IF EXISTS ( SELECT [Id] FROM [EntityType] WHERE [Guid] = '{3}' )
                BEGIN
                    UPDATE [EntityType] SET
                        [IsEntity] = {1},
                        [IsSecured] = {2},
                        [Name] = '{0}'
                    WHERE [Guid] = '{3}'
                END
                ELSE
                BEGIN
                    IF EXISTS ( SELECT [Id] FROM [EntityType] WHERE [Name] = '{0}' )
                    BEGIN
                        UPDATE [EntityType] SET
                            [IsEntity] = {1},
                            [IsSecured] = {2},
                            [Guid] = '{3}'
                        WHERE [Name] = '{0}'
                    END
                    ELSE
                    BEGIN
                        INSERT INTO [EntityType] ([Name], [IsEntity], [IsSecured], [IsCommon], [Guid])
                        VALUES ('{0}', {1}, {2}, 0, '{3}')
                    END
                END
",
                name,
                isEntity ? "1" : "0",
                isSecured ? "1" : "0",
                guid ) );
        }

        /// <summary>
        /// Updates the entity type by unique identifier.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="friendlyName">Name of the friendly.</param>
        /// <param name="assemblyName">Name of the assembly.</param>
        /// <param name="isEntity">if set to <c>true</c> [is entity].</param>
        /// <param name="isSecured">if set to <c>true</c> [is secured].</param>
        /// <param name="guid">The unique identifier.</param>
        public void UpdateEntityTypeByGuid( string name, string friendlyName, string assemblyName, bool isEntity, bool isSecured, string guid )
        {
            RemoveAutogeneratedEntityType( name, guid );

            Migration.Sql( string.Format( @"
                IF EXISTS ( SELECT [Id] FROM [EntityType] WHERE [Guid] = '{5}' )
                BEGIN
                    UPDATE [EntityType] SET
                        [FriendlyName] = '{1}',
                        [AssemblyName] = '{2}',
                        [IsEntity] = {3},
                        [IsSecured] = {4},
                        [Name] = '{0}'
                    WHERE [Guid] = '{5}'
                END
                ELSE
                BEGIN
                    DECLARE @Guid uniqueidentifier
                    SET @Guid = (SELECT [Guid] FROM [EntityType] WHERE [Name] = '{0}')
                    IF @Guid IS NULL
                    BEGIN
                        INSERT INTO [EntityType] (
                            [Name],[FriendlyName],[AssemblyName],[IsEntity],[IsSecured],[IsCommon],[Guid])
                        VALUES(
                            '{0}','{1}','{2}',{3},{4},0,'{5}')
                    END
                    ELSE
                    BEGIN

                        UPDATE [EntityType] SET
                            [FriendlyName] = '{1}',
                            [AssemblyName] = '{2}',
                            [IsEntity] = {3},
                            [IsSecured] = {4},
                            [Guid] = '{5}'
                        WHERE [Name] = '{0}'

                        -- Update any attribute values that might have been using entity's old guid value
	                    DECLARE @EntityTypeFieldTypeId int = ( SELECT TOP 1 [Id] FROM [FieldType] WHERE [Class] = 'Rock.Field.Types.EntityTypeFieldType' )
	                    DECLARE @ComponentFieldTypeId int = ( SELECT TOP 1 [Id] FROM [FieldType] WHERE [Class] = 'Rock.Field.Types.ComponentFieldType' )
	                    DECLARE @ComponentsFieldTypeId int = ( SELECT TOP 1 [Id] FROM [FieldType] WHERE [Class] = 'Rock.Field.Types.ComponentsFieldType' )

                        UPDATE V SET [Value] = REPLACE( LOWER([Value]), LOWER(CAST(@Guid AS varchar(50))), LOWER('{5}') )
	                    FROM [AttributeValue] V
	                    INNER JOIN [Attribute] A ON A.[Id] = V.[AttributeId]
	                    WHERE ( A.[FieldTypeId] = @EntityTypeFieldTypeId OR A.[FieldTypeId] = @ComponentFieldTypeId	OR A.[FieldTypeId] = @ComponentsFieldTypeId )
                        OPTION (RECOMPILE)

                    END
                END
",
                    name.Replace( "'", "''" ),
                    friendlyName.Replace( "'", "''" ),
                    assemblyName.Replace( "'", "''" ),
                    isEntity ? "1" : "0",
                    isSecured ? "1" : "0",
                    guid ) );
        }

        /// <summary>
        /// Updates the entity attribute by unique identifier.
        /// </summary>
        /// <param name="entityTypeName">Name of the entity type.</param>
        /// <param name="fieldTypeGuid">The field type unique identifier.</param>
        /// <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
        /// <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
        /// <param name="name">The name.</param>
        /// <param name="description">The description.</param>
        /// <param name="order">The order.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="key">The key.</param>
        public void UpdateEntityAttributeByGuid( string entityTypeName, string fieldTypeGuid, string entityTypeQualifierColumn, string entityTypeQualifierValue, string name, string description, int order, string defaultValue, string guid, string key = null )
        {
            if ( string.IsNullOrWhiteSpace( key ) )
            {
                key = name.Replace( " ", string.Empty );
            }

            Migration.Sql( string.Format( @"

                DECLARE @EntityTypeId int
                SET @EntityTypeId = (SELECT [Id] FROM [EntityType] WHERE [Name] = '{0}')

                DECLARE @FieldTypeId int
                SET @FieldTypeId = (SELECT [Id] FROM [FieldType] WHERE [Guid] = '{1}')

                IF EXISTS (
                    SELECT [Id]
                    FROM [Attribute]
                    WHERE [Guid] = '{7}' )
                BEGIN
                    UPDATE [Attribute] SET
                        [Name] = '{3}',
                        [Description] = '{4}',
                        [Order] = {5},
                        [DefaultValue] = '{6}',
                        [EntityTypeId] = @EntityTypeId,
                        [EntityTypeQualifierColumn] = '{8}',
                        [EntityTypeQualifierValue] = '{9}',
                        [Key] = '{2}'
                    WHERE [Guid] = '{7}'
                END
                ELSE
                BEGIN
                    IF EXISTS (
                    SELECT [Id]
                    FROM [Attribute]
                    WHERE [EntityTypeId] = @EntityTypeId
                    AND [EntityTypeQualifierColumn] = '{8}'
                    AND [EntityTypeQualifierValue] = '{9}'
                    AND [Key] = '{2}' )
                    BEGIN
                        UPDATE [Attribute] SET
                            [Name] = '{3}',
                            [Description] = '{4}',
                            [Order] = {5},
                            [DefaultValue] = '{6}',
                            [Guid] = '{7}'
                        WHERE [EntityTypeId] = @EntityTypeId
                        AND [EntityTypeQualifierColumn] = '{8}'
                        AND [EntityTypeQualifierValue] = '{9}'
                        AND [Key] = '{2}'
                    END
                    ELSE
                    BEGIN
                        INSERT INTO [Attribute] (
                            [IsSystem],[FieldTypeId],[EntityTypeId],[EntityTypeQualifierColumn],[EntityTypeQualifierValue],
                            [Key],[Name],[Description],
                            [Order],[IsGridColumn],[DefaultValue],[IsMultiValue],[IsRequired],
                            [Guid])
                        VALUES(
                            1,@FieldTypeId,@EntityTypeid,'{8}','{9}',
                            '{2}','{3}','{4}',
                            {5},0,'{6}',0,0,
                            '{7}')
                    END
                END
",
                    entityTypeName,
                    fieldTypeGuid,
                    key,
                    name,
                    description?.Replace( "'", "''" ) ?? string.Empty,
                    order,
                    defaultValue?.Replace( "'", "''" ) ?? string.Empty,
                    guid,
                    entityTypeQualifierColumn,
                    entityTypeQualifierValue )
            );
        }

        #endregion Entity Type Methods

        #region Field Type Methods

        /// <summary>
        /// Removes the type of the autogenerated field.
        /// </summary>
        /// <param name="className">Name of the class.</param>
        /// <param name="guid">The unique identifier.</param>
        public void RemoveAutogeneratedFieldType( string className, string guid )
        {
            Migration.Sql( String.Format( @"
                    Delete
                    From Attribute
                    Where FieldTypeId in (
                        Select Id
                        From FieldType
                        Where Class = '{0}'
                        And Guid != '{1}'
                        )
                    
                    Delete
                    From FieldType
                    Where Class = '{0}'
                    And Guid != '{1}'
                ",
                className,
                guid ) );
        }

        /// <summary>
        /// Updates the field type by unique identifier.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="description">The description.</param>
        /// <param name="assembly">The assembly.</param>
        /// <param name="className">Name of the class.</param>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="IsSystem">if set to <c>true</c> [is system].</param>
        public void UpdateFieldTypeByGuid( string name, string description, string assembly, string className, string guid, bool IsSystem = true )
        {
            RemoveAutogeneratedFieldType( className, guid );

            Migration.Sql( string.Format( @"
                IF EXISTS ( SELECT [Id] FROM [FieldType] WHERE [Guid] = '{4}' )
                BEGIN
                    UPDATE [FieldType] SET
                        [Name] = '{0}',
                        [Description] = '{1}',
                        [Guid] = '{4}',
                        [IsSystem] = {5},
                        [Assembly] = '{2}',
                        [Class] = '{3}'
                    WHERE [Guid] = '{4}'
                END
                ELSE
                BEGIN
                    DECLARE @Id int
                    SET @Id = (SELECT [Id] FROM [FieldType] WHERE [Assembly] = '{2}' AND [Class] = '{3}')
                    IF @Id IS NULL
                    BEGIN
                        INSERT INTO [FieldType] (
                            [Name],[Description],[Assembly],[Class],[Guid],[IsSystem])
                        VALUES(
                            '{0}','{1}','{2}','{3}','{4}',{5})
                    END
                    ELSE
                    BEGIN
                        UPDATE [FieldType] SET
                            [Name] = '{0}',
                            [Description] = '{1}',
                            [Guid] = '{4}',
                            [IsSystem] = {5}
                        WHERE [Assembly] = '{2}'
                        AND [Class] = '{3}'
                    END
                END
",
                    name.Replace( "'", "''" ),
                    description.Replace( "'", "''" ),
                    assembly,
                    className,
                    guid,
                    IsSystem ? "1" : "0" ) );
        }

        #endregion Field Type Methods

        #region Existing User Methods

        /// <summary>
        /// Determines whether [is existing user].
        /// </summary>
        /// <param name="migrationNumber">The migration number.</param>
        /// <returns><c>true</c> if [is existing user]; otherwise, <c>false</c>.</returns>
        public bool IsExistingUser( int migrationNumber )
        {
            var isExistingUser = false;
            var migrationId = Migration.SqlScalar( String.Format( "Select Top 1 Id From PluginMigration Where PluginAssemblyName = 'com.centralaz.RoomManagement' and MigrationNumber = {0}", migrationNumber ) );
            if ( migrationId == null || migrationId.ToStringSafe().IsNullOrWhiteSpace() )
            {
                isExistingUser = false;
            }
            else
            {
                isExistingUser = true;
            }

            return isExistingUser;
        }

        #endregion Existing User Methods

        #region Security Methods

        /// <summary>
        /// Adds the security authentication for reservation status.
        /// </summary>
        /// <param name="statusGuid">The status unique identifier.</param>
        /// <param name="order">The order.</param>
        /// <param name="action">The action.</param>
        /// <param name="allow">if set to <c>true</c> [allow].</param>
        /// <param name="groupGuid">The group unique identifier.</param>
        /// <param name="specialRole">The special role.</param>
        /// <param name="authGuid">The authentication unique identifier.</param>
        public void AddSecurityAuthForReservationStatus( string statusGuid, int order, string action, bool allow, string groupGuid, Rock.Model.SpecialRole specialRole, string authGuid )
        {
            if ( string.IsNullOrWhiteSpace( groupGuid ) )
            {
                groupGuid = Guid.Empty.ToStringSafe();
            }

            string entityTypeName = "com.bemaservices.RoomManagement.Model.ReservationStatus";
            EnsureEntityTypeExists( entityTypeName );

            string sql = @"
    DECLARE @EntityTypeId int = ( SELECT TOP 1 [Id] FROM [EntityType] WHERE [name] = '{0}')
    DECLARE @ReservationStatusId int = (SELECT TOP 1 [Id] FROM [_com_bemaservices_RoomManagement_ReservationStatus] WHERE [Guid] = '{1}')
    IF @EntityTypeId IS NOT NULL AND @ReservationStatusId IS NOT NULL
    BEGIN
        DECLARE @GroupId int = ( SELECT TOP 1 [Id] FROM [Group] WHERE [Guid] = '{2}')
        IF NOT EXISTS (
            SELECT [Id] FROM [dbo].[Auth]
            WHERE [EntityTypeId] = @EntityTypeId
            AND [EntityId] = @ReservationStatusId
            AND [Action] = '{4}'
            AND [AllowOrDeny] = '{5}'
            AND [SpecialRole] = {6}
            AND [GroupId] = @GroupId
        )
        BEGIN
            INSERT INTO [dbo].[Auth]
                   ([EntityTypeId]
                   ,[EntityId]
                   ,[Order]
                   ,[Action]
                   ,[AllowOrDeny]
                   ,[SpecialRole]
                   ,[GroupId]
                   ,[Guid])
             VALUES
                   (@EntityTypeId
                   ,@ReservationStatusId
                   ,{3}
                   ,'{4}'
                   ,'{5}'
                   ,{6}
                   ,@GroupId
                   ,'{7}')
        END
    END
";

            Migration.Sql( string.Format( sql,
                entityTypeName,                 // 0
                statusGuid,                   // 1
                groupGuid,                      // 2
                order,                          // 3
                action,                         // 4
                ( allow ? "A" : "D" ),          // 5
                specialRole.ConvertToInt(),     // 6
                authGuid ) );                   // 7

        }

        /// <summary>
        /// Adds the type of the security authentication for reservation.
        /// </summary>
        /// <param name="reservationTypeGuid">The reservation type unique identifier.</param>
        /// <param name="order">The order.</param>
        /// <param name="action">The action.</param>
        /// <param name="allow">if set to <c>true</c> [allow].</param>
        /// <param name="groupGuid">The group unique identifier.</param>
        /// <param name="specialRole">The special role.</param>
        /// <param name="authGuid">The authentication unique identifier.</param>
        public void AddSecurityAuthForReservationType( string reservationTypeGuid, int order, string action, bool allow, string groupGuid, Rock.Model.SpecialRole specialRole, string authGuid )
        {
            if ( string.IsNullOrWhiteSpace( groupGuid ) )
            {
                groupGuid = Guid.Empty.ToStringSafe();
            }

            string entityTypeName = "com.bemaservices.RoomManagement.Model.ReservationType";

            string sql = @"
    DECLARE @EntityTypeId int = ( SELECT TOP 1 [Id] FROM [EntityType] WHERE [name] = '{0}')
    DECLARE @ReservationTypeId int = (SELECT TOP 1 [Id] FROM [_com_bemaservices_RoomManagement_ReservationType] WHERE [Guid] = '{1}')

    IF @EntityTypeId IS NOT NULL AND @ReservationTypeId IS NOT NULL
    BEGIN

        DECLARE @GroupId int = ( SELECT TOP 1 [Id] FROM [Group] WHERE [Guid] = '{2}')

        IF NOT EXISTS (
            SELECT [Id] FROM [dbo].[Auth]
            WHERE [EntityTypeId] = @EntityTypeId
            AND [EntityId] = @ReservationTypeId
            AND [Action] = '{4}'
            AND [AllowOrDeny] = '{5}'
            AND [SpecialRole] = {6}
            AND [GroupId] = @GroupId
        )
        BEGIN
            INSERT INTO [dbo].[Auth]
                   ([EntityTypeId]
                   ,[EntityId]
                   ,[Order]
                   ,[Action]
                   ,[AllowOrDeny]
                   ,[SpecialRole]
                   ,[GroupId]
                   ,[Guid])
             VALUES
                   (@EntityTypeId
                   ,@ReservationTypeId
                   ,{3}
                   ,'{4}'
                   ,'{5}'
                   ,{6}
                   ,@GroupId
                   ,'{7}')
        END
    END
";

            Migration.Sql( string.Format( sql,
                entityTypeName,                 // 0
                reservationTypeGuid,                   // 1
                groupGuid,                      // 2
                order,                          // 3
                action,                         // 4
                ( allow ? "A" : "D" ),          // 5
                specialRole.ConvertToInt(),     // 6
                authGuid ) );                   // 7

        }

        #endregion Security Methods

        #region Workflow Methods

        /// <summary>
        /// Adds the action type attribute value in the situation where the attributeGuid
        /// is not well-known.
        /// </summary>
        /// <param name="actionTypeGuid">The action type unique identifier.</param>
        /// <param name="actionEntityTypeGuid">The action entity type unique identifier.</param>
        /// <param name="fieldTypeGuid">The field type unique identifier.</param>
        /// <param name="attributeName">Name of the attribute.</param>
        /// <param name="attributeKey">The attribute key.</param>
        /// <param name="attributeDescription">The attribute description.</param>
        /// <param name="attributeOrder">The attribute order.</param>
        /// <param name="attributeDefaultValue">The attribute default value.</param>
        /// <param name="value">The value.</param>
        public void AddActionTypeAttributeValue( string actionTypeGuid, string actionEntityTypeGuid, string fieldTypeGuid, string attributeName, string attributeKey, string attributeDescription, int attributeOrder, string attributeDefaultValue, string value )
        {

            Migration.Sql( string.Format( @"

                DECLARE @ActionEntityTypeId int = (SELECT [Id] FROM [EntityType] WHERE [Guid] = '{0}')
                DECLARE @FieldTypeId int = (SELECT [Id] FROM [FieldType] WHERE [Guid] = '{1}')
                DECLARE @EntityTypeId int = (SELECT [Id] FROM [EntityType] WHERE [Name] = 'Rock.Model.WorkflowActionType')
                DECLARE @AttributeGuid uniqueidentifier = (SELECT [Guid] FROM [Attribute] WHERE [EntityTypeId] = @EntityTypeId AND [EntityTypeQualifierColumn] = 'EntityTypeId' AND [EntityTypeQualifierValue] = CAST(@ActionEntityTypeId as varchar) AND [Key] = '{2}' )
                DECLARE @AttributeId int

                -- Find or add the action type's attribute
                IF @AttributeGuid IS NOT NULL
                BEGIN
                    SET @Attributeid = (SELECT [Id] FROM [Attribute] WHERE [Guid] = @AttributeGuid)
                END
                ELSE
                BEGIN
                    INSERT INTO [Attribute] (
                        [IsSystem],[FieldTypeId],[EntityTypeId],[EntityTypeQualifierColumn],[EntityTypeQualifierValue],
                        [Key],[Name],[Description],
                        [Order],[IsGridColumn],[DefaultValue],[IsMultiValue],[IsRequired],
                        [Guid])
                    VALUES(
                        1,@FieldTypeId, @EntityTypeId,'EntityTypeId',CAST(@ActionEntityTypeId as varchar),
                        '{2}','{3}','{4}',
                        {5},0,'{6}',0,0,
                        NEWID() )
                    SET @AttributeId = SCOPE_IDENTITY()
                END

                -- Now set the action type's attribute value
                DECLARE @ActionTypeId int = (SELECT [Id] FROM [WorkflowActionType] WHERE [Guid] = '{7}')

                IF @ActionTypeId IS NOT NULL AND @AttributeId IS NOT NULL
                BEGIN

                    -- Delete existing attribute value
                    DELETE [AttributeValue]
                    WHERE [AttributeId] = @AttributeId
                    AND [EntityId] = @ActionTypeId

                    INSERT INTO [AttributeValue] (
                        [IsSystem],[AttributeId],[EntityId],
                        [Value],
                        [Guid])
                    VALUES(
                        1,@AttributeId,@ActionTypeId,
                        '{8}',
                        NEWID())

                END
",
                    actionEntityTypeGuid,
                    fieldTypeGuid,
                    attributeKey ?? attributeName.Replace( " ", string.Empty ),
                    attributeName,
                    attributeDescription.Replace( "'", "''" ),
                    attributeOrder,
                    attributeDefaultValue.Replace( "'", "''" ),
                    actionTypeGuid,
                    value.Replace( "'", "''" ) )
            );

        }

        #endregion Workflow Methods

        #region Block Methods

        /// <summary>
        /// Adds the block attribute value. Temporarily copying a v7 method here
        /// </summary>
        /// <param name="skipIfAlreadyExists">if set to <c>true</c> [skip if already exists].</param>
        /// <param name="blockGuid">The block unique identifier.</param>
        /// <param name="attributeGuid">The attribute unique identifier.</param>
        /// <param name="value">The value.</param>
        /// <param name="appendToExisting">if set to <c>true</c> [append to existing].</param>
        public void AddBlockAttributeValue( bool skipIfAlreadyExists, string blockGuid, string attributeGuid, string value, bool appendToExisting = false )
        {
            var addBlockValueSQL = string.Format( @"

                DECLARE @BlockId int
                SET @BlockId = (SELECT [Id] FROM [Block] WHERE [Guid] = '{0}')

                DECLARE @AttributeId int
                SET @AttributeId = (SELECT [Id] FROM [Attribute] WHERE [Guid] = '{1}')

                IF @BlockId IS NOT NULL AND @AttributeId IS NOT NULL
                BEGIN

                    DECLARE @TheValue NVARCHAR(MAX) = '{2}'

                    -- If appendToExisting (and any current value exists), get the current value before we delete it...
                    IF 1 = {3} AND EXISTS (SELECT 1 FROM [AttributeValue] WHERE [AttributeId] = @AttributeId AND [EntityId] = @BlockId )
                    BEGIN
                        SET @TheValue = (SELECT [Value] FROM [AttributeValue] WHERE [AttributeId] = @AttributeId AND [EntityId] = @BlockId )
                        -- If the new value is not in the old value, append it.
                        IF CHARINDEX( '{2}', @TheValue ) = 0
                        BEGIN
                            SET @TheValue = (SELECT @TheValue + ',' + '{2}' )
                        END
                    END

                    -- Delete existing attribute value first (might have been created by Rock system)
                    DELETE [AttributeValue]
                    WHERE [AttributeId] = @AttributeId
                    AND [EntityId] = @BlockId

                    INSERT INTO [AttributeValue] (
                        [IsSystem],[AttributeId],[EntityId],
                        [Value],
                        [Guid])
                    VALUES(
                        1,@AttributeId,@BlockId,
                        @TheValue,
                        NEWID())
                END
",
                    blockGuid,
                    attributeGuid,
                    value.Replace( "'", "''" ),
                    ( appendToExisting ? "1" : "0" )
                );

            if ( skipIfAlreadyExists )
            {
                addBlockValueSQL = $@"IF NOT EXISTS (
		SELECT *
		FROM [AttributeValue] av
		INNER JOIN [Attribute] a ON av.AttributeId = a.Id
		INNER JOIN [Block] b ON av.EntityId = b.Id
		WHERE b.[Guid] = '{blockGuid}'
			AND a.[Guid] = '{attributeGuid}'
		)
BEGIN
" + addBlockValueSQL + "\nEND";
            }

            Migration.Sql( addBlockValueSQL );
        }

        /// <summary>
        /// Gets the attribute value from block.
        /// </summary>
        /// <param name="blockId">The block identifier.</param>
        /// <param name="attributeGuid">The attribute unique identifier.</param>
        /// <returns>System.String.</returns>
        public string GetAttributeValueFromBlock( int blockId, Guid attributeGuid )
        {
            var valueSql = Migration.SqlScalar( String.Format( @"
                Select av.Value
                From AttributeValue av
                Join Attribute a on av.AttributeId = a.Id
                Where av.EntityId = {0}
                And a.Guid = '{1}'
                ",
                blockId,
                attributeGuid.ToStringSafe() ) );
            if ( valueSql != null )
            {
                return valueSql.ToStringSafe();
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the attribute value from block.
        /// </summary>
        /// <param name="blockId">The block identifier.</param>
        /// <param name="attributeGuid">The attribute unique identifier.</param>
        /// <returns>System.String.</returns>
        public string GetAttributeValueFromBlock( int? blockId, Guid attributeGuid )
        {
            var attributeValue = "";
            if ( blockId.HasValue )
            {
                GetAttributeValueFromBlock( blockId.Value, attributeGuid );
            }

            return attributeValue;

        }

        #endregion Block Methods

        #region Reservation Type Methods

        /// <summary>
        /// Generates the default reservation type SQL.
        /// </summary>
        /// <returns>System.String.</returns>
        public string GenerateDefaultReservationTypeSql()
        {
            string finalApprovalGroupValue = null;
            string superAdminGroupValue = null;
            int? defaultSetupTime = -1;
            bool isNumberAttendingRequired = true;
            bool isContactDetailsRequired = true;
            bool isSetupTimeRequired = true;

            var blockIdSql = Migration.SqlScalar( @"
                Select Id
                From Block
                Where [Guid] = '65091E04-77CE-411C-989F-EAD7D15778A0'
                " );
            int? blockId = blockIdSql.ToStringSafe().AsIntegerOrNull();
            if ( blockId.HasValue )
            {
                finalApprovalGroupValue = GetAttributeValueFromBlock( blockId.Value, "E715D25F-CA53-4B16-B8B2-4A94FD3A3560".AsGuid() );
                superAdminGroupValue = GetAttributeValueFromBlock( blockId.Value, "BBA41563-5379-43FA-955B-93C1926A4F66".AsGuid() );

                var defaultSetupTimeValue = GetAttributeValueFromBlock( blockId.Value, "2FA0C64D-9511-4278-9445-BD0A847EA299".AsGuid() );
                if ( defaultSetupTimeValue != null )
                {
                    defaultSetupTime = defaultSetupTimeValue.AsIntegerOrNull();
                }

                var isNumberAttendingRequiredValue = GetAttributeValueFromBlock( blockId.Value, "7162CFE4-FACD-4D75-8F09-2D42DBF1A887".AsGuid() );
                if ( isNumberAttendingRequiredValue != null )
                {
                    isNumberAttendingRequired = isNumberAttendingRequiredValue.AsBoolean();
                }

                var isContactDetailsRequiredValue = GetAttributeValueFromBlock( blockId.Value, "1C8DE8CB-E078-4483-9648-7C2CC57E6985".AsGuid() );
                if ( isContactDetailsRequiredValue != null )
                {
                    isContactDetailsRequired = isContactDetailsRequiredValue.AsBoolean();
                }

                var isSetupTimeRequiredValue = GetAttributeValueFromBlock( blockId.Value, "A184337B-BB99-4261-A295-0F54447CF0C6".AsGuid() );
                if ( isSetupTimeRequiredValue != null )
                {
                    isSetupTimeRequired = isSetupTimeRequiredValue.AsBoolean();
                }
            }

            var sqlQry = string.Format( @"
DECLARE @finalApprovalGroupId INT = NULL;
DECLARE @superAdminGroupId INT = NULL;

SET @finalApprovalGroupId = (Select Id From [Group] Where [Guid] = '{2}')
SET @superAdminGroupId = (Select Id From [Group] Where [Guid] = '{3}')

INSERT INTO [dbo].[_com_bemaservices_RoomManagement_ReservationType](
	                [IsSystem],
                    [Name],
	                [Description],
	                [IsActive],
                    [IconCssClass],
                    [FinalApprovalGroupId],
                    [SuperAdminGroupId],
                    [DefaultSetupTime],
                    [IsCommunicationHistorySaved],
                    [IsNumberAttendingRequired],
                    [IsContactDetailsRequired],
                    [IsSetupTimeRequired],
	                [Guid])
VALUES
                    (1,
                    '{0}',
                    '{1}',
                    1,
                    'fa fa-home',
                    @finalApprovalGroupId,
                    @superAdminGroupId,
                    {4},
                    0,
                    {5},
                    {6},
                    {7},
                    'E443F926-0882-41D5-91EF-480EA366F660')"
                    , "Standard Reservation Type" // Name
                    , "The default reservation type." // Description
                    , !String.IsNullOrWhiteSpace( finalApprovalGroupValue ) ? finalApprovalGroupValue : Guid.Empty.ToStringSafe() //Final Approval Group Id
                    , !String.IsNullOrWhiteSpace( superAdminGroupValue ) ? superAdminGroupValue : Guid.Empty.ToStringSafe() // SuperAdminGroupId
                    , defaultSetupTime.HasValue ? defaultSetupTime.ToStringSafe() : "NULL" //DefaultSetupTime
                    , isNumberAttendingRequired ? 1 : 0 // Is Number Attending Required
                    , isContactDetailsRequired ? 1 : 0 // Is Contact Details Required
                    , isSetupTimeRequired ? 1 : 0 // Is Setup Time Required
);
            return sqlQry;
        }

        #endregion




    }
}
